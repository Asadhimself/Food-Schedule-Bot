from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hbold, hitalic, quote_html

from keyboards.inline.confirm_call import confirm_callback
from keyboards.inline.edit import edit_callback
from loader import dp, db


@dp.callback_query_handler(edit_callback.filter(action="time"))
async def edit_food(call: CallbackQuery, callback_data: dict):
    await call.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞...üòì", show_alert=True)


@dp.callback_query_handler(edit_callback.filter(action="food"))
async def edit_food(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer(cache_time=10)
    info = callback_data
    await call.message.answer(f"‚è≥ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ {info['schedule_day']} / {info['schedule_when']}:\n\n"
                              "–•–æ—Ä–æ—à–æ! –ø—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –ø–æ–º–µ–Ω—è—é –Ω–∞ –Ω–µ–≥–æ –≤ –≤–∞—à–µ–º –≥—Ä–∞—Ñ–∏–∫–µ ü¶æ")
    await state.set_state("changes")
    await state.update_data(day=info['schedule_day'])
    await state.update_data(when=info['schedule_when'])


@dp.message_handler(state="changes")
async def set_changes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            day, when = data.get("day"), data.get("when")
            today_old = await db.send_food(when, day, message.chat.id)
            confirm = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                                         callback_data=f"action:yes:{day}:{when}:{'+'.join(message.text.split())}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="action:no:no:no:no")
                ]
            ])
            text = [hbold(f"‚è≥ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ {day} / {when}\n\n"),
                    hitalic(f"‚ùå –°—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å: {quote_html(today_old)}\n"),
                    hitalic(f"‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {quote_html(message.text)}\n\n"),
                    (f"üôè –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –¥–Ω—è –Ω–∞–∂–º–∏—Ç–µ /today")]
            await message.answer(text="".join(text),
                                 reply_markup=confirm)
        except Exception as err:
            await message.answer(f"{err.__class__.__name__}: {err}")
        await state.finish()


@dp.callback_query_handler(confirm_callback.filter(conf="yes"))
async def conf_yes(call: CallbackQuery, callback_data: dict):
    info = callback_data
    food = " ".join(info['food'].split("+"))
    await db.change_food(info['when'], info['day'], call.from_user.id, food)
    await call.message.edit_text("–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã! üß∑\n\n"
                                 "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å /today")
    await call.message.edit_reply_markup()


@dp.callback_query_handler(confirm_callback.filter(conf="no"))
async def conf_no(call: CallbackQuery):
    await call.message.edit_text("–•–æ—Ä–æ—à–æ. –û—Å—Ç–∞–≤–∏–ª —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å üòå\n\n"
                                 "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å /today")
    await call.message.edit_reply_markup()