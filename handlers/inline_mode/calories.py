from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from loader import dp, db


@dp.message_handler(Text("üîé –ü–æ–∏—Å–∫–æ–≤–∏–∫ –∫–∞–ª–æ—Ä–∏–π"))
@dp.message_handler(Command("calories"), state='*')
async def send_inline_help(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(text="–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞‚úçÔ∏è:\n"
                              "<code>@eat_with_me_bot</code>\n\n"
                              "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤–∏–∫ –≤ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —á–∞—Ç–µ üåê\n\n"
                              "–¢–∞–∫ –∂–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º –º–æ–∂–µ—Ç–µ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ‚ÜôÔ∏è",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                             [
                                 InlineKeyboardButton(text="–í–æ–π—Ç–∏ –≤ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º", switch_inline_query_current_chat=""),
                                 InlineKeyboardButton(text="–ò–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ",
                                                      switch_inline_query=""),
                             ]
                         ]))


@dp.inline_handler(text="")
async def empty_query(query: types.InlineQuery):
    await query.answer(
        results=[
            types.InlineQueryResultArticle(
                id="unknown",
                title="–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫–æ–π-—Ç–æ –∑–∞–ø—Ä–æ—Åüóë. –ü–æ–º–æ—â—å –≤ –∑–∞–ø—Ä–æ—Å–µ:",
                input_message_content=types.InputTextMessageContent(
                    message_text="–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞‚úçÔ∏è:\n"
                                 "<code>@eat_with_me_bot</code>\n\n"
                                 "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤–∏–∫ –≤ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —á–∞—Ç–µ üåê\n\n"
                                 "–¢–∞–∫ –∂–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º –º–æ–∂–µ—Ç–µ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ‚ÜôÔ∏è",
                    parse_mode="HTML"
                ),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ üÜò",
                            switch_inline_query_current_chat="–ë–∞—Ä–∞–Ω–∏–Ω–∞")
                    ]
                ]
                )
            )
        ],
        cache_time=5
    )


@dp.inline_handler()
async def some_query(query: types.InlineQuery):
    # —Ç–æ, —á—Ç–æ –≤–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
    user_input = query.query.lower()
    # username –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
    records = await db.get_all_products()
    inline_queries = []
    for num, item in enumerate(records, start=1):
        if user_input.lower() in item["product_name"].lower():
            res = types.InlineQueryResultArticle(
                id=str(num),
                title=f"{item['product_name']}",
                input_message_content=types.InputTextMessageContent(
                    message_text=f"üç≤ <b>{item['product_name']}</b>:\n"
                                 f"üí™ <i>–ö–∞–ª–æ—Ä–∏–∏:</i> {item['calories']}\n"
                                 f"ü•ö <i>–ë–µ–ª–∫–∏:</i> {item['proteins']}\n"
                                 f"ü•© <i>–ñ–∏—Ä—ã:</i> {item['fats']}\n"
                                 f"üçû <i>–£–≥–ª–µ–≤–æ–¥—ã:</i> {item['carbohydronates']}")
            )
            inline_queries.append(res)

    await query.answer(
        results=inline_queries[:50]
    )
